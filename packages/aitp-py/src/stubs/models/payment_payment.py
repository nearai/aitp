# coding: utf-8

"""
    AITP Payments

    AITP Payments Specification

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime

from pydantic import BaseModel, Field, StrictStr
from aitp.stubs.models.payment_payment_payment_method import PaymentPaymentPaymentMethod

class PaymentPayment(BaseModel):
    """
    PaymentPayment
    """
    quote_id: StrictStr = Field(default=..., description="Reference to the quote being paid")
    payment_method: PaymentPaymentPaymentMethod = Field(...)
    payer_id: StrictStr = Field(default=..., description="Identifier for the payer")
    timestamp: datetime = Field(default=..., description="When the payment was made")
    payer_signature: StrictStr = Field(default=..., description="Cryptographic signature by the payer")
    __properties = ["quote_id", "payment_method", "payer_id", "timestamp", "payer_signature"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PaymentPayment:
        """Create an instance of PaymentPayment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of payment_method
        if self.payment_method:
            _dict['payment_method'] = self.payment_method.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PaymentPayment:
        """Create an instance of PaymentPayment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PaymentPayment.parse_obj(obj)

        _obj = PaymentPayment.parse_obj({
            "quote_id": obj.get("quote_id"),
            "payment_method": PaymentPaymentPaymentMethod.from_dict(obj.get("payment_method")) if obj.get("payment_method") is not None else None,
            "payer_id": obj.get("payer_id"),
            "timestamp": obj.get("timestamp"),
            "payer_signature": obj.get("payer_signature")
        })
        return _obj


