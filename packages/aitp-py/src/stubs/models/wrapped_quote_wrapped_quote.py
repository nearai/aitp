# coding: utf-8

"""
    AITP Payments

    AITP Payments Specification

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, conlist
from aitp.stubs.models.quote_quote import QuoteQuote
from aitp.stubs.models.wrapper import Wrapper

class WrappedQuoteWrappedQuote(BaseModel):
    """
    WrappedQuoteWrappedQuote
    """
    original_quote: QuoteQuote = Field(...)
    wrappers: conlist(Wrapper) = Field(default=..., description="Chain of agents that have wrapped this quote")
    __properties = ["original_quote", "wrappers"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WrappedQuoteWrappedQuote:
        """Create an instance of WrappedQuoteWrappedQuote from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of original_quote
        if self.original_quote:
            _dict['original_quote'] = self.original_quote.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in wrappers (list)
        _items = []
        if self.wrappers:
            for _item in self.wrappers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['wrappers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WrappedQuoteWrappedQuote:
        """Create an instance of WrappedQuoteWrappedQuote from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WrappedQuoteWrappedQuote.parse_obj(obj)

        _obj = WrappedQuoteWrappedQuote.parse_obj({
            "original_quote": QuoteQuote.from_dict(obj.get("original_quote")) if obj.get("original_quote") is not None else None,
            "wrappers": [Wrapper.from_dict(_item) for _item in obj.get("wrappers")] if obj.get("wrappers") is not None else None
        })
        return _obj


