# coding: utf-8

"""
    AITP Payments

    AITP Payments Specification

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from aitp.stubs.models.payment_detail import PaymentDetail

class PaymentConfirmationPaymentConfirmation(BaseModel):
    """
    PaymentConfirmationPaymentConfirmation
    """
    quote_id: StrictStr = Field(default=..., description="Reference to the quote that was paid")
    payment_id: StrictStr = Field(default=..., description="Unique identifier for this payment")
    result: StrictStr = Field(default=..., description="Result of the payment processing")
    timestamp: datetime = Field(default=..., description="When the payment was processed")
    message: Optional[StrictStr] = Field(default=None, description="Human-readable message about the payment")
    details: Optional[conlist(PaymentDetail)] = Field(default=None, description="Additional details about the transaction")
    merchant_signature: StrictStr = Field(default=..., description="Cryptographic signature by the merchant")
    __properties = ["quote_id", "payment_id", "result", "timestamp", "message", "details", "merchant_signature"]

    @validator('result')
    def result_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('success', 'failure', 'pending',):
            raise ValueError("must be one of enum values ('success', 'failure', 'pending')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PaymentConfirmationPaymentConfirmation:
        """Create an instance of PaymentConfirmationPaymentConfirmation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in details (list)
        _items = []
        if self.details:
            for _item in self.details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['details'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PaymentConfirmationPaymentConfirmation:
        """Create an instance of PaymentConfirmationPaymentConfirmation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PaymentConfirmationPaymentConfirmation.parse_obj(obj)

        _obj = PaymentConfirmationPaymentConfirmation.parse_obj({
            "quote_id": obj.get("quote_id"),
            "payment_id": obj.get("payment_id"),
            "result": obj.get("result"),
            "timestamp": obj.get("timestamp"),
            "message": obj.get("message"),
            "details": [PaymentDetail.from_dict(_item) for _item in obj.get("details")] if obj.get("details") is not None else None,
            "merchant_signature": obj.get("merchant_signature")
        })
        return _obj


