# coding: utf-8

"""
    AITP Payments

    AITP Payments Specification

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from aitp.stubs.models.payment_option import PaymentOption
from aitp.stubs.models.revenue_share import RevenueShare

class QuoteQuote(BaseModel):
    """
    QuoteQuote
    """
    quote_id: StrictStr = Field(default=..., description="Unique identifier for this payment request")
    merchant_id: StrictStr = Field(default=..., description="Identifier for the recipient of the payment")
    description: StrictStr = Field(default=..., description="Human-readable description of what is being paid for")
    expiration: Optional[datetime] = Field(default=None, description="When this quote expires")
    next_recipient: Optional[StrictStr] = Field(default=None, description="The next agent in the chain that should receive this quote")
    payment_options: conlist(PaymentOption) = Field(default=..., description="Available payment options")
    revenue_share: Optional[RevenueShare] = None
    merchant_signature: StrictStr = Field(default=..., description="Cryptographic signature by the merchant")
    __properties = ["quote_id", "merchant_id", "description", "expiration", "next_recipient", "payment_options", "revenue_share", "merchant_signature"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> QuoteQuote:
        """Create an instance of QuoteQuote from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in payment_options (list)
        _items = []
        if self.payment_options:
            for _item in self.payment_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['payment_options'] = _items
        # override the default output from pydantic by calling `to_dict()` of revenue_share
        if self.revenue_share:
            _dict['revenue_share'] = self.revenue_share.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> QuoteQuote:
        """Create an instance of QuoteQuote from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QuoteQuote.parse_obj(obj)

        _obj = QuoteQuote.parse_obj({
            "quote_id": obj.get("quote_id"),
            "merchant_id": obj.get("merchant_id"),
            "description": obj.get("description"),
            "expiration": obj.get("expiration"),
            "next_recipient": obj.get("next_recipient"),
            "payment_options": [PaymentOption.from_dict(_item) for _item in obj.get("payment_options")] if obj.get("payment_options") is not None else None,
            "revenue_share": RevenueShare.from_dict(obj.get("revenue_share")) if obj.get("revenue_share") is not None else None,
            "merchant_signature": obj.get("merchant_signature")
        })
        return _obj


