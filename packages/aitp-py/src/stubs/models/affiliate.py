# coding: utf-8

"""
    AITP Payments

    AITP Payments Specification

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, conint, validator

class Affiliate(BaseModel):
    """
    Affiliate
    """
    id: StrictStr = Field(default=..., description="Identifier for the affiliate")
    role: StrictStr = Field(default=..., description="Role of this affiliate in the transaction")
    weight: Optional[conint(strict=True, ge=1)] = Field(default=None, description="Relative weight for revenue distribution")
    __properties = ["id", "role", "weight"]

    @validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('personal_assistant', 'discovery', 'service', 'other',):
            raise ValueError("must be one of enum values ('personal_assistant', 'discovery', 'service', 'other')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Affiliate:
        """Create an instance of Affiliate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Affiliate:
        """Create an instance of Affiliate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Affiliate.parse_obj(obj)

        _obj = Affiliate.parse_obj({
            "id": obj.get("id"),
            "role": obj.get("role"),
            "weight": obj.get("weight")
        })
        return _obj


