# coding: utf-8

"""
    AITP Payments

    AITP Payments Specification

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from aitp.stubs.models.affiliate import Affiliate

class Wrapper(BaseModel):
    """
    Wrapper
    """
    affiliate_id: StrictStr = Field(default=..., description="Identifier for this affiliate")
    role: StrictStr = Field(default=..., description="Role of this affiliate in the transaction")
    added_affiliates: Optional[conlist(Affiliate)] = Field(default=None, description="Additional affiliates added by this wrapper")
    next_recipient: StrictStr = Field(default=..., description="The next agent in the chain that should receive this quote")
    timestamp: datetime = Field(default=..., description="When this wrapper was added")
    signature: StrictStr = Field(default=..., description="Cryptographic signature by this wrapper")
    __properties = ["affiliate_id", "role", "added_affiliates", "next_recipient", "timestamp", "signature"]

    @validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('personal_assistant', 'discovery', 'service', 'other',):
            raise ValueError("must be one of enum values ('personal_assistant', 'discovery', 'service', 'other')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Wrapper:
        """Create an instance of Wrapper from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in added_affiliates (list)
        _items = []
        if self.added_affiliates:
            for _item in self.added_affiliates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['added_affiliates'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Wrapper:
        """Create an instance of Wrapper from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Wrapper.parse_obj(obj)

        _obj = Wrapper.parse_obj({
            "affiliate_id": obj.get("affiliate_id"),
            "role": obj.get("role"),
            "added_affiliates": [Affiliate.from_dict(_item) for _item in obj.get("added_affiliates")] if obj.get("added_affiliates") is not None else None,
            "next_recipient": obj.get("next_recipient"),
            "timestamp": obj.get("timestamp"),
            "signature": obj.get("signature")
        })
        return _obj


