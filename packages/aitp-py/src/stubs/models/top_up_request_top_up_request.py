# coding: utf-8

"""
    AITP Payments

    AITP Payments Specification

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator

class TopUpRequestTopUpRequest(BaseModel):
    """
    TopUpRequestTopUpRequest
    """
    channel_id: StrictStr = Field(default=..., description="Identifier for the payment channel to top up")
    amount: Optional[constr(strict=True)] = Field(default=None, description="Amount to add to the channel, as a string to prevent floating point imprecision")
    currency: StrictStr = Field(default=..., description="Currency code (e.g., 'USD')")
    reason: Optional[StrictStr] = Field(default=None, description="Reason for requesting more funds")
    merchant_id: StrictStr = Field(default=..., description="Identifier for the merchant requesting the top-up")
    timestamp: datetime = Field(default=..., description="When the top-up was requested")
    merchant_signature: StrictStr = Field(default=..., description="Cryptographic signature by the merchant")
    __properties = ["channel_id", "amount", "currency", "reason", "merchant_id", "timestamp", "merchant_signature"]

    @validator('amount')
    def amount_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d+(\.\d+)?$", value):
            raise ValueError(r"must validate the regular expression /^\d+(\.\d+)?$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TopUpRequestTopUpRequest:
        """Create an instance of TopUpRequestTopUpRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TopUpRequestTopUpRequest:
        """Create an instance of TopUpRequestTopUpRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TopUpRequestTopUpRequest.parse_obj(obj)

        _obj = TopUpRequestTopUpRequest.parse_obj({
            "channel_id": obj.get("channel_id"),
            "amount": obj.get("amount"),
            "currency": obj.get("currency"),
            "reason": obj.get("reason"),
            "merchant_id": obj.get("merchant_id"),
            "timestamp": obj.get("timestamp"),
            "merchant_signature": obj.get("merchant_signature")
        })
        return _obj


