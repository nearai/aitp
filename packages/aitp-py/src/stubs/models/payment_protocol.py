# coding: utf-8

"""
    AITP Payments

    AITP Payments Specification

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from aitp.stubs.models.payment import Payment
from aitp.stubs.models.payment_confirmation import PaymentConfirmation
from aitp.stubs.models.quote import Quote
from aitp.stubs.models.top_up_request import TopUpRequest
from aitp.stubs.models.top_up_response import TopUpResponse
from aitp.stubs.models.wrapped_quote import WrappedQuote
from typing import Union, Any, List, TYPE_CHECKING
from pydantic import StrictStr, Field

PAYMENTPROTOCOL_ANY_OF_SCHEMAS = ["Payment", "PaymentConfirmation", "Quote", "TopUpRequest", "TopUpResponse", "WrappedQuote"]

class PaymentProtocol(BaseModel):
    """
    PaymentProtocol
    """

    # data type: Quote
    anyof_schema_1_validator: Optional[Quote] = None
    # data type: WrappedQuote
    anyof_schema_2_validator: Optional[WrappedQuote] = None
    # data type: Payment
    anyof_schema_3_validator: Optional[Payment] = None
    # data type: PaymentConfirmation
    anyof_schema_4_validator: Optional[PaymentConfirmation] = None
    # data type: TopUpRequest
    anyof_schema_5_validator: Optional[TopUpRequest] = None
    # data type: TopUpResponse
    anyof_schema_6_validator: Optional[TopUpResponse] = None
    if TYPE_CHECKING:
        actual_instance: Union[Payment, PaymentConfirmation, Quote, TopUpRequest, TopUpResponse, WrappedQuote]
    else:
        actual_instance: Any
    any_of_schemas: List[str] = Field(PAYMENTPROTOCOL_ANY_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = PaymentProtocol.construct()
        error_messages = []
        # validate data type: Quote
        if not isinstance(v, Quote):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Quote`")
        else:
            return v

        # validate data type: WrappedQuote
        if not isinstance(v, WrappedQuote):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WrappedQuote`")
        else:
            return v

        # validate data type: Payment
        if not isinstance(v, Payment):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Payment`")
        else:
            return v

        # validate data type: PaymentConfirmation
        if not isinstance(v, PaymentConfirmation):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PaymentConfirmation`")
        else:
            return v

        # validate data type: TopUpRequest
        if not isinstance(v, TopUpRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TopUpRequest`")
        else:
            return v

        # validate data type: TopUpResponse
        if not isinstance(v, TopUpResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TopUpResponse`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in PaymentProtocol with anyOf schemas: Payment, PaymentConfirmation, Quote, TopUpRequest, TopUpResponse, WrappedQuote. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> PaymentProtocol:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> PaymentProtocol:
        """Returns the object represented by the json string"""
        instance = PaymentProtocol.construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[Quote] = None
        try:
            instance.actual_instance = Quote.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[WrappedQuote] = None
        try:
            instance.actual_instance = WrappedQuote.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[Payment] = None
        try:
            instance.actual_instance = Payment.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[PaymentConfirmation] = None
        try:
            instance.actual_instance = PaymentConfirmation.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[TopUpRequest] = None
        try:
            instance.actual_instance = TopUpRequest.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_6_validator: Optional[TopUpResponse] = None
        try:
            instance.actual_instance = TopUpResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into PaymentProtocol with anyOf schemas: Payment, PaymentConfirmation, Quote, TopUpRequest, TopUpResponse, WrappedQuote. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())


