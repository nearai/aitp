# coding: utf-8

"""
    AITP Payments

    AITP Payments Specification

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr, validator
from aitp.stubs.models.payment_method import PaymentMethod

class PaymentOption(BaseModel):
    """
    PaymentOption
    """
    amount: Optional[constr(strict=True)] = Field(default=None, description="Amount to be paid, as a string to prevent floating point imprecision")
    currency: StrictStr = Field(default=..., description="Currency code (e.g., 'USD')")
    payment_methods: conlist(PaymentMethod) = Field(default=..., description="Available methods to pay this amount")
    __properties = ["amount", "currency", "payment_methods"]

    @validator('amount')
    def amount_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d+(\.\d+)?$", value):
            raise ValueError(r"must validate the regular expression /^\d+(\.\d+)?$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PaymentOption:
        """Create an instance of PaymentOption from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in payment_methods (list)
        _items = []
        if self.payment_methods:
            for _item in self.payment_methods:
                if _item:
                    _items.append(_item.to_dict())
            _dict['payment_methods'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PaymentOption:
        """Create an instance of PaymentOption from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PaymentOption.parse_obj(obj)

        _obj = PaymentOption.parse_obj({
            "amount": obj.get("amount"),
            "currency": obj.get("currency"),
            "payment_methods": [PaymentMethod.from_dict(_item) for _item in obj.get("payment_methods")] if obj.get("payment_methods") is not None else None
        })
        return _obj


